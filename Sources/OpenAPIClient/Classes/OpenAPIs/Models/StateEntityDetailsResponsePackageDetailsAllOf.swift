//
// StateEntityDetailsResponsePackageDetailsAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StateEntityDetailsResponsePackageDetailsAllOf: Codable, JSONEncodable, Hashable {

    public var codes: PackageCodeCollection
    public var vmType: PackageVmType
    /** Hex-encoded binary blob. */
    public var codeHashHex: String
    /** Hex-encoded binary blob. */
    public var codeHex: String
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public var royaltyVaultBalance: String?
    public var blueprints: PackageBlueprintCollection?
    public var schemas: EntitySchemaCollection?
    public var roleAssignments: ComponentEntityRoleAssignments?

    public init(codes: PackageCodeCollection, vmType: PackageVmType, codeHashHex: String, codeHex: String, royaltyVaultBalance: String? = nil, blueprints: PackageBlueprintCollection? = nil, schemas: EntitySchemaCollection? = nil, roleAssignments: ComponentEntityRoleAssignments? = nil) {
        self.codes = codes
        self.vmType = vmType
        self.codeHashHex = codeHashHex
        self.codeHex = codeHex
        self.royaltyVaultBalance = royaltyVaultBalance
        self.blueprints = blueprints
        self.schemas = schemas
        self.roleAssignments = roleAssignments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case codes
        case vmType = "vm_type"
        case codeHashHex = "code_hash_hex"
        case codeHex = "code_hex"
        case royaltyVaultBalance = "royalty_vault_balance"
        case blueprints
        case schemas
        case roleAssignments = "role_assignments"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(codes, forKey: .codes)
        try container.encode(vmType, forKey: .vmType)
        try container.encode(codeHashHex, forKey: .codeHashHex)
        try container.encode(codeHex, forKey: .codeHex)
        try container.encodeIfPresent(royaltyVaultBalance, forKey: .royaltyVaultBalance)
        try container.encodeIfPresent(blueprints, forKey: .blueprints)
        try container.encodeIfPresent(schemas, forKey: .schemas)
        try container.encodeIfPresent(roleAssignments, forKey: .roleAssignments)
    }
}

