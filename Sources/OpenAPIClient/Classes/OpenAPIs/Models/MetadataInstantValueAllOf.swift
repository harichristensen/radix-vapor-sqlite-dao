//
// MetadataInstantValueAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetadataInstantValueAllOf: Codable, JSONEncodable, Hashable {

    /** The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use \"Z\" (denoting UTC) and omits milliseconds. E.g.: `2023-01-26T18:30:09Z`.  Note: This field will return clamped value if the actual on-ledger `unix_timestamp_seconds` value is outside the basic range supported by the RFC 3339 / ISO 8601 standard, which starts at year 1583 (i.e. the beginning of the Gregorian calendar) and ends at year 9999 (inclusive).  */
    public var value: String
    /** A decimal string-encoded 64-bit signed integer, marking the unix timestamp in seconds.  Note: this field accurately represents the full range of possible on-ledger values (i.e. `-2^63 <= seconds < 2^63`).  */
    public var unixTimestampSeconds: String

    public init(value: String, unixTimestampSeconds: String) {
        self.value = value
        self.unixTimestampSeconds = unixTimestampSeconds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case value
        case unixTimestampSeconds = "unix_timestamp_seconds"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(value, forKey: .value)
        try container.encode(unixTimestampSeconds, forKey: .unixTimestampSeconds)
    }
}

